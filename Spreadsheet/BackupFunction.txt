Regex varRegex = new Regex(@"[/\*-+]?(?<var>\w+\z?)");
            Regex opRegex = new Regex(@"(?<op>\-|\+|/|\*)");

            MatchCollection variables = varRegex.Matches(expression);
            MatchCollection operators = opRegex.Matches(expression);

            Console.WriteLine("{0} matches found in:\n\t{1}",
                          variables.Count,
                          expression);
            Console.WriteLine("{0} matches found in:\n\t{1}",
                          operators.Count,
                          expression);

            //foreach (Match match in variables)
            //{
            //    GroupCollection groups = match.Groups;

            //    Console.WriteLine("'{0}'\n", groups["var"].Value);
            //}

            foreach (Match match in variables)
            {
                Console.WriteLine("'{0}'\n", match.Value);
            }

            foreach (Match match in operators)
            {
                GroupCollection groups = match.Groups;

                Console.WriteLine("'{0}'\n", groups["op"].Value);
            }
			
			
			
			
			
			
			        public int CompareTo(VariableNode other)
        {
            if (variable.CompareTo(other.variable) < 0) //less than
                return -1;
            else if (variable.CompareTo(other.variable) == 0) //equal to
                return 0;
            return 1; //greater than
        }

        public static bool operator ==(ExpNode LeftNode, ExpNode rightNode)
        {
            if ((object)LeftNode == null && (object)rightNode == null) //both are null, so they are equal
                return true;
            else if ((object)LeftNode == null || (object)rightNode == null) //if both arent null, but one is. then they are not equal
                return false;
            return LeftNode.variable.CompareTo(rightNode.variable) == 0;
        }
		
		
		
		
		
		
		
		
		        public static bool operator ==(ExpNode inputLeftNode, ExpNode inputRightNode)
        {
            VariableNode leftNodeAsVar = (VariableNode)inputLeftNode;
            VariableNode righttNodeAsVar = (VariableNode)inputRightNode;
            if (leftNodeAsVar == null || righttNodeAsVar == null) //both are null, so they are not both variableNodes, and are not equal
                return false;
            if (leftNodeAsVar.Variable == righttNodeAsVar.Variable) //variables match the same string
                return true;
            return false; //if the nodes do not contain the same string.
        }

        public static bool operator !=(ExpNode inputLeftNode, ExpNode inputRightNode)
        {
            VariableNode leftNodeAsVar = (VariableNode)inputLeftNode;
            VariableNode righttNodeAsVar = (VariableNode)inputRightNode;
            if (leftNodeAsVar == null || righttNodeAsVar == null) //both are null, so they are not both variableNodes, and are not equal
                return true;
            if (leftNodeAsVar.Variable == righttNodeAsVar.Variable) //variables match the same string
                return false;
            return true; //if the nodes do not contain the same string.
			
			
			
			
			
			
			
			Console.WriteLine("\t'{0}' at index [{1}, {2}]", variables.Value, variables.Index, variables.Index + variables.Length);
            Console.WriteLine("Operator {0} at index [{1}, {2}]", operators.Value, operators.Index, operators.Index + operators.Length);
            Console.WriteLine("\t'{0}' at index [{1}, {2}]", variables.NextMatch().Value, variables.NextMatch().Index, variables.NextMatch().Index + variables.NextMatch().Length);
			
			
			
			
			
			
		public static string ToPostfix(string expression)
        {
            List<string> tokens = Split(expression, @"[-+\*/\(\)]");
            var stack = new Stack<string>();
            var output = new List<string>();
            foreach (string token in tokens)
            {
                if (int.TryParse(token, out _))
                {
                    output.Add(token);
                }
                else if (operators.TryGetValue(token, out var op1))
                {
                    while (stack.Count > 0 && operators.TryGetValue(stack.Peek(), out var op2))
                    {
                        int c = op1.Precedence.CompareTo(op2.Precedence);
                        if (c < 0 || !op1.RightAssociative && c <= 0)
                        {
                            output.Add(stack.Pop());
                        }
                        else
                        {
                            break;
                        }
                    }
                    stack.Push(token);
                }
                else if (token == "(")
                {
                    stack.Push(token);
                }
                else if (token == ")")
                {
                    string top = "";
                    while (stack.Count > 0 && (top = stack.Pop()) != "(")
                    {
                        output.Add(top);
                    }
                    if (top != "(") throw new ArgumentException("No matching left parenthesis.");
                }
            }
            while (stack.Count > 0)
            {
                var top = stack.Pop();
                if (!operators.ContainsKey(top)) throw new ArgumentException("No matching right parenthesis.");
                output.Add(top);
            }
            return string.Join(" ", output);          
        }
