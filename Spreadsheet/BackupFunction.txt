Regex varRegex = new Regex(@"[/\*-+]?(?<var>\w+\z?)");
            Regex opRegex = new Regex(@"(?<op>\-|\+|/|\*)");

            MatchCollection variables = varRegex.Matches(expression);
            MatchCollection operators = opRegex.Matches(expression);

            Console.WriteLine("{0} matches found in:\n\t{1}",
                          variables.Count,
                          expression);
            Console.WriteLine("{0} matches found in:\n\t{1}",
                          operators.Count,
                          expression);

            //foreach (Match match in variables)
            //{
            //    GroupCollection groups = match.Groups;

            //    Console.WriteLine("'{0}'\n", groups["var"].Value);
            //}

            foreach (Match match in variables)
            {
                Console.WriteLine("'{0}'\n", match.Value);
            }

            foreach (Match match in operators)
            {
                GroupCollection groups = match.Groups;

                Console.WriteLine("'{0}'\n", groups["op"].Value);
            }
			
			
			
			
			
			
			        public int CompareTo(VariableNode other)
        {
            if (variable.CompareTo(other.variable) < 0) //less than
                return -1;
            else if (variable.CompareTo(other.variable) == 0) //equal to
                return 0;
            return 1; //greater than
        }

        public static bool operator ==(ExpNode LeftNode, ExpNode rightNode)
        {
            if ((object)LeftNode == null && (object)rightNode == null) //both are null, so they are equal
                return true;
            else if ((object)LeftNode == null || (object)rightNode == null) //if both arent null, but one is. then they are not equal
                return false;
            return LeftNode.variable.CompareTo(rightNode.variable) == 0;
        }
		
		
		
		
		
		
		
		
		        public static bool operator ==(ExpNode inputLeftNode, ExpNode inputRightNode)
        {
            VariableNode leftNodeAsVar = (VariableNode)inputLeftNode;
            VariableNode righttNodeAsVar = (VariableNode)inputRightNode;
            if (leftNodeAsVar == null || righttNodeAsVar == null) //both are null, so they are not both variableNodes, and are not equal
                return false;
            if (leftNodeAsVar.Variable == righttNodeAsVar.Variable) //variables match the same string
                return true;
            return false; //if the nodes do not contain the same string.
        }

        public static bool operator !=(ExpNode inputLeftNode, ExpNode inputRightNode)
        {
            VariableNode leftNodeAsVar = (VariableNode)inputLeftNode;
            VariableNode righttNodeAsVar = (VariableNode)inputRightNode;
            if (leftNodeAsVar == null || righttNodeAsVar == null) //both are null, so they are not both variableNodes, and are not equal
                return true;
            if (leftNodeAsVar.Variable == righttNodeAsVar.Variable) //variables match the same string
                return false;
            return true; //if the nodes do not contain the same string.